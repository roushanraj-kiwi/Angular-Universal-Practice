/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { createBuilder, targetFromTargetString, } from '@angular-devkit/architect';
import { tags } from '@angular-devkit/core';
import * as browserSync from 'browser-sync';
import { createProxyMiddleware } from 'http-proxy-middleware';
import { join, resolve as pathResolve } from 'path';
import { EMPTY, combineLatest, from, of, zip } from 'rxjs';
import { catchError, concatMap, debounce, debounceTime, delay, finalize, ignoreElements, map, mapTo, startWith, switchMap, tap, } from 'rxjs/operators';
import * as url from 'url';
import { getAvailablePort, spawnAsObservable, waitUntilServerIsListening } from './utils';
/** Log messages to ignore and not rely to the logger */
const IGNORED_STDOUT_MESSAGES = [
    'server listening on',
    'Angular is running in development mode. Call enableProdMode() to enable production mode.',
];
export function execute(options, context) {
    const browserTarget = targetFromTargetString(options.browserTarget);
    const serverTarget = targetFromTargetString(options.serverTarget);
    const getBaseUrl = (bs) => `${bs.getOption('scheme')}://${bs.getOption('host')}:${bs.getOption('port')}`;
    const browserTargetRun = context.scheduleTarget(browserTarget, {
        watch: true,
        progress: options.progress,
        verbose: options.verbose,
        // Disable bundle budgets are these are not meant to be used with a dev-server as this will add extra JavaScript for live-reloading.
        budgets: [],
    });
    const serverTargetRun = context.scheduleTarget(serverTarget, {
        watch: true,
        progress: options.progress,
        verbose: options.verbose,
    });
    const bsInstance = browserSync.create();
    context.logger.error(tags.stripIndents `
  ****************************************************************************************
  This is a simple server for use in testing or debugging Angular applications locally.
  It hasn't been reviewed for security issues.

  DON'T USE IT FOR PRODUCTION!
  ****************************************************************************************
 `);
    return zip(browserTargetRun, serverTargetRun, getAvailablePort()).pipe(switchMap(([br, sr, nodeServerPort]) => {
        return combineLatest([br.output, sr.output]).pipe(
        // This is needed so that if both server and browser emit close to each other
        // we only emit once. This typically happens on the first build.
        debounceTime(120), switchMap(([b, s]) => {
            if (!s.success || !b.success) {
                return of([b, s]);
            }
            return startNodeServer(s, nodeServerPort, context.logger, !!options.inspect).pipe(mapTo([b, s]), catchError((err) => {
                context.logger.error(`A server error has occurred.\n${mapErrorToMessage(err)}`);
                return EMPTY;
            }));
        }), map(([b, s]) => [
            {
                success: b.success && s.success,
                error: b.error || s.error,
            },
            nodeServerPort,
        ]), tap(([builderOutput]) => {
            if (builderOutput.success) {
                context.logger.info('\nCompiled successfully.');
            }
        }), debounce(([builderOutput]) => builderOutput.success && !options.inspect
            ? waitUntilServerIsListening(nodeServerPort)
            : EMPTY), finalize(() => {
            void br.stop();
            void sr.stop();
        }));
    }), concatMap(([builderOutput, nodeServerPort]) => {
        if (!builderOutput.success) {
            return of(builderOutput);
        }
        if (bsInstance.active) {
            bsInstance.reload();
            return of(builderOutput);
        }
        else {
            return from(initBrowserSync(bsInstance, nodeServerPort, options, context)).pipe(tap((bs) => {
                const baseUrl = getBaseUrl(bs);
                context.logger.info(tags.oneLine `
                **
                Angular Universal Live Development Server is listening on ${baseUrl},
                open your browser on ${baseUrl}
                **
              `);
            }), mapTo(builderOutput));
        }
    }), map((builderOutput) => ({
        success: builderOutput.success,
        error: builderOutput.error,
        baseUrl: bsInstance && getBaseUrl(bsInstance),
    })), finalize(() => {
        if (bsInstance) {
            bsInstance.exit();
            bsInstance.cleanup();
        }
    }), catchError((error) => of({
        success: false,
        error: mapErrorToMessage(error),
    })));
}
// Logs output to the terminal.
// Removes any trailing new lines from the output.
export function log({ stderr, stdout }, logger) {
    if (stderr) {
        // Strip the webpack scheme (webpack://) from error log.
        logger.error(stderr.replace(/\n?$/, '').replace(/webpack:\/\//g, '.'));
    }
    if (stdout && !IGNORED_STDOUT_MESSAGES.some((x) => stdout.includes(x))) {
        logger.info(stdout.replace(/\n?$/, ''));
    }
}
function startNodeServer(serverOutput, port, logger, inspectMode = false) {
    const outputPath = serverOutput.outputPath;
    const path = join(outputPath, 'main.js');
    const env = { ...process.env, PORT: '' + port };
    const args = ['--enable-source-maps', `"${path}"`];
    if (inspectMode) {
        args.unshift('--inspect-brk');
    }
    return of(null).pipe(delay(0), // Avoid EADDRINUSE error since it will cause the kill event to be finish.
    switchMap(() => spawnAsObservable('node', args, { env, shell: true })), tap((res) => log({ stderr: res.stderr, stdout: res.stdout }, logger)), ignoreElements(), 
    // Emit a signal after the process has been started
    startWith(undefined));
}
async function initBrowserSync(browserSyncInstance, nodeServerPort, options, context) {
    if (browserSyncInstance.active) {
        return browserSyncInstance;
    }
    const { port: browserSyncPort, open, host, publicHost, proxyConfig } = options;
    const bsPort = browserSyncPort || (await getAvailablePort());
    const bsOptions = {
        proxy: {
            target: `localhost:${nodeServerPort}`,
            proxyOptions: {
                xfwd: true,
            },
            proxyRes: [
                (proxyRes) => {
                    if ('headers' in proxyRes) {
                        proxyRes.headers['cache-control'] = undefined;
                    }
                },
            ],
            // proxyOptions is not in the typings
        },
        host,
        port: bsPort,
        ui: false,
        server: false,
        notify: false,
        ghostMode: false,
        logLevel: options.verbose ? 'debug' : 'silent',
        open,
        https: getSslConfig(context.workspaceRoot, options),
    };
    const publicHostNormalized = publicHost && publicHost.endsWith('/')
        ? publicHost.substring(0, publicHost.length - 1)
        : publicHost;
    if (publicHostNormalized) {
        const { protocol, hostname, port, pathname } = url.parse(publicHostNormalized);
        const defaultSocketIoPath = '/browser-sync/socket.io';
        const defaultNamespace = '/browser-sync';
        const hasPathname = !!(pathname && pathname !== '/');
        const namespace = hasPathname ? pathname + defaultNamespace : defaultNamespace;
        const path = hasPathname ? pathname + defaultSocketIoPath : defaultSocketIoPath;
        bsOptions.socket = {
            namespace,
            path,
            domain: url.format({
                protocol,
                hostname,
                port,
            }),
        };
        // When having a pathname we also need to create a reverse proxy because socket.io
        // will be listening on: 'http://localhost:4200/ssr/browser-sync/socket.io'
        // However users will typically have a reverse proxy that will redirect all matching requests
        // ex: http://testinghost.com/ssr -> http://localhost:4200 which will result in a 404.
        if (hasPathname) {
            // Remove leading slash
            // eslint-disable-next-line @typescript-eslint/no-unused-expressions
            (bsOptions.scriptPath = (p) => p.substring(1)),
                (bsOptions.middleware = [
                    createProxyMiddleware(defaultSocketIoPath, {
                        target: url.format({
                            protocol: 'http',
                            hostname: host,
                            port: bsPort,
                            pathname: path,
                        }),
                        ws: true,
                        logLevel: 'silent',
                    }),
                ]);
        }
    }
    if (proxyConfig) {
        if (!bsOptions.middleware) {
            bsOptions.middleware = [];
        }
        else if (!Array.isArray(bsOptions.middleware)) {
            bsOptions.middleware = [bsOptions.middleware];
        }
        bsOptions.middleware = [
            ...bsOptions.middleware,
            ...getProxyConfig(context.workspaceRoot, proxyConfig),
        ];
    }
    return new Promise((resolve, reject) => {
        browserSyncInstance.init(bsOptions, (error, bs) => {
            if (error) {
                reject(error);
            }
            else {
                resolve(bs);
            }
        });
    });
}
function mapErrorToMessage(error) {
    if (error instanceof Error) {
        return error.message;
    }
    if (typeof error === 'string') {
        return error;
    }
    return '';
}
function getSslConfig(root, options) {
    const { ssl, sslCert, sslKey } = options;
    if (ssl && sslCert && sslKey) {
        return {
            key: pathResolve(root, sslKey),
            cert: pathResolve(root, sslCert),
        };
    }
    return ssl;
}
function getProxyConfig(root, proxyConfig) {
    const proxyPath = pathResolve(root, proxyConfig);
    let proxySettings;
    try {
        proxySettings = require(proxyPath);
    }
    catch (error) {
        if (error.code === 'MODULE_NOT_FOUND') {
            throw new Error(`Proxy config file ${proxyPath} does not exist.`);
        }
        throw error;
    }
    const proxies = Array.isArray(proxySettings) ? proxySettings : [proxySettings];
    const createdProxies = [];
    for (const proxy of proxies) {
        for (const [key, context] of Object.entries(proxy)) {
            if (typeof key === 'string') {
                createdProxies.push(createProxyMiddleware(key.replace(/^\*$/, '**').replace(/\/\*$/, ''), context));
            }
            else {
                createdProxies.push(createProxyMiddleware(key, context));
            }
        }
    }
    return createdProxies;
}
export default createBuilder(execute);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL2J1aWxkZXJzL3NyYy9zc3ItZGV2LXNlcnZlci9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFFSCxPQUFPLEVBR0wsYUFBYSxFQUNiLHNCQUFzQixHQUN2QixNQUFNLDJCQUEyQixDQUFDO0FBQ25DLE9BQU8sRUFBaUIsSUFBSSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDM0QsT0FBTyxLQUFLLFdBQVcsTUFBTSxjQUFjLENBQUM7QUFDNUMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDOUQsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLElBQUksV0FBVyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxLQUFLLEVBQWMsYUFBYSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZFLE9BQU8sRUFDTCxVQUFVLEVBQ1YsU0FBUyxFQUNULFFBQVEsRUFDUixZQUFZLEVBQ1osS0FBSyxFQUNMLFFBQVEsRUFDUixjQUFjLEVBQ2QsR0FBRyxFQUNILEtBQUssRUFDTCxTQUFTLEVBQ1QsU0FBUyxFQUNULEdBQUcsR0FDSixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sS0FBSyxHQUFHLE1BQU0sS0FBSyxDQUFDO0FBRzNCLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUUxRix3REFBd0Q7QUFDeEQsTUFBTSx1QkFBdUIsR0FBRztJQUM5QixxQkFBcUI7SUFDckIsMEZBQTBGO0NBQzNGLENBQUM7QUFPRixNQUFNLFVBQVUsT0FBTyxDQUNyQixPQUFtQyxFQUNuQyxPQUF1QjtJQUV2QixNQUFNLGFBQWEsR0FBRyxzQkFBc0IsQ0FBQyxPQUFPLENB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QUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFDOUMsT0FBYyxDQUNrQixDQUNuQyxDQUFDO2FBQ0g7aUJBQU07Z0JBQ0wsY0FBYyxDQUFDLElBQUksQ0FDakIscUJBQXFCLENBQUMsR0FBRyxFQUFFLE9BQWMsQ0FBa0MsQ0FDNUUsQ0FBQzthQUNIO1NBQ0Y7S0FDRjtJQUVELE9BQU8sY0FBYyxDQUFDO0FBQ3hCLENBQUM7QUFFRCxlQUFlLGFBQWEsQ0FBNEMsT0FBTyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cblxuaW1wb3J0IHtcbiAgQnVpbGRlckNvbnRleHQsXG4gIEJ1aWxkZXJPdXRwdXQsXG4gIGNyZWF0ZUJ1aWxkZXIsXG4gIHRhcmdldEZyb21UYXJnZXRTdHJpbmcsXG59IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9hcmNoaXRlY3QnO1xuaW1wb3J0IHsganNvbiwgbG9nZ2luZywgdGFncyB9IGZyb20gJ0Bhbmd1bGFyLWRldmtpdC9jb3JlJztcbmltcG9ydCAqIGFzIGJyb3dzZXJTeW5jIGZyb20gJ2Jyb3dzZXItc3luYyc7XG5pbXBvcnQgeyBjcmVhdGVQcm94eU1pZGRsZXdhcmUgfSBmcm9tICdodHRwLXByb3h5LW1pZGRsZXdhcmUnO1xuaW1wb3J0IHsgam9pbiwgcmVzb2x2ZSBhcyBwYXRoUmVzb2x2ZSB9IGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgRU1QVFksIE9ic2VydmFibGUsIGNvbWJpbmVMYXRlc3QsIGZyb20sIG9mLCB6aXAgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7XG4gIGNhdGNoRXJyb3IsXG4gIGNvbmNhdE1hcCxcbiAgZGVib3VuY2UsXG4gIGRlYm91bmNlVGltZSxcbiAgZGVsYXksXG4gIGZpbmFsaXplLFxuICBpZ25vcmVFbGVtZW50cyxcbiAgbWFwLFxuICBtYXBUbyxcbiAgc3RhcnRXaXRoLFxuICBzd2l0Y2hNYXAsXG4gIHRhcCxcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0ICogYXMgdXJsIGZyb20gJ3VybCc7XG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tICcuL3NjaGVtYSc7XG5cbmltcG9ydCB7IGdldEF2YWlsYWJsZVBvcnQsIHNwYXduQXNPYnNlcnZhYmxlLCB3YWl0VW50aWxTZXJ2ZXJJc0xpc3RlbmluZyB9IGZyb20gJy4vdXRpbHMnO1xuXG4vKiogTG9nIG1lc3NhZ2VzIHRvIGlnbm9yZSBhbmQgbm90IHJlbHkgdG8gdGhlIGxvZ2dlciAqL1xuY29uc3QgSUdOT1JFRF9TVERPVVRfTUVTU0FHRVMgPSBbXG4gICdzZXJ2ZXIgbGlzdGVuaW5nIG9uJyxcbiAgJ0FuZ3VsYXIgaXMgcnVubmluZyBpbiBkZXZlbG9wbWVudCBtb2RlLiBDYWxsIGVuYWJsZVByb2RNb2RlKCkgdG8gZW5hYmxlIHByb2R1Y3Rpb24gbW9kZS4nLFxuXTtcblxuZXhwb3J0IHR5cGUgU1NSRGV2U2VydmVyQnVpbGRlck9wdGlvbnMgPSBTY2hlbWEgJiBqc29uLkpzb25PYmplY3Q7XG5leHBvcnQgdHlwZSBTU1JEZXZTZXJ2ZXJCdWlsZGVyT3V0cHV0ID0gQnVpbGRlck91dHB1dCAmIHtcbiAgYmFzZVVybD86IHN0cmluZztcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBleGVjdXRlKFxuICBvcHRpb25zOiBTU1JEZXZTZXJ2ZXJCdWlsZGVyT3B0aW9ucyxcbiAgY29udGV4dDogQnVpbGRlckNvbnRleHQsXG4pOiBPYnNlcnZhYmxlPFNTUkRldlNlcnZlckJ1aWxkZXJPdXRwdXQ+IHtcbiAgY29uc3QgYnJvd3NlclRhcmdldCA9IHRhcmdldEZyb21UYXJnZXRTdHJpbmcob3B0aW9ucy5icm93c2VyVGFyZ2V0KTtcbiAgY29uc3Qgc2VydmVyVGFyZ2V0ID0gdGFyZ2V0RnJvbVRhcmdldFN0cmluZyhvcHRpb25zLnNlcnZlclRhcmdldCk7XG4gIGNvbnN0IGdldEJhc2VVcmwgPSAoYnM6IGJyb3dzZXJTeW5jLkJyb3dzZXJTeW5jSW5zdGFuY2UpID0+XG4gICAgYCR7YnMuZ2V0T3B0aW9uKCdzY2hlbWUnKX06Ly8ke2JzLmdldE9wdGlvbignaG9zdCcpfToke2JzLmdldE9wdGlvbigncG9ydCcpfWA7XG4gIGNvbnN0IGJyb3dzZXJUYXJnZXRSdW4gPSBjb250ZXh0LnNjaGVkdWxlVGFyZ2V0KGJyb3dzZXJUYXJnZXQsIHtcbiAgICB3YXRjaDogdHJ1ZSxcbiAgICBwcm9ncmVzczogb3B0aW9ucy5wcm9ncmVzcyxcbiAgICB2ZXJib3NlOiBvcHRpb25zLnZlcmJvc2UsXG4gICAgLy8gRGlzYWJsZSBidW5kbGUgYnVkZ2V0cyBhcmUgdGhlc2UgYXJlIG5vdCBtZWFudCB0byBiZSB1c2VkIHdpdGggYSBkZXYtc2VydmVyIGFzIHRoaXMgd2lsbCBhZGQgZXh0cmEgSmF2YVNjcmlwdCBmb3IgbGl2ZS1yZWxvYWRpbmcuXG4gICAgYnVkZ2V0czogW10sXG4gIH0pO1xuXG4gIGNvbnN0IHNlcnZlclRhcmdldFJ1biA9IGNvbnRleHQuc2NoZWR1bGVUYXJnZXQoc2VydmVyVGFyZ2V0LCB7XG4gICAgd2F0Y2g6IHRydWUsXG4gICAgcHJvZ3Jlc3M6IG9wdGlvbnMucHJvZ3Jlc3MsXG4gICAgdmVyYm9zZTogb3B0aW9ucy52ZXJib3NlLFxuICB9KTtcblxuICBjb25zdCBic0luc3RhbmNlID0gYnJvd3NlclN5bmMuY3JlYXRlKCk7XG5cbiAgY29udGV4dC5sb2dnZXIuZXJyb3IodGFncy5zdHJpcEluZGVudHNgXG4gICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiAgVGhpcyBpcyBhIHNpbXBsZSBzZXJ2ZXIgZm9yIHVzZSBpbiB0ZXN0aW5nIG9yIGRlYnVnZ2luZyBBbmd1bGFyIGFwcGxpY2F0aW9ucyBsb2NhbGx5LlxuICBJdCBoYXNuJ3QgYmVlbiByZXZpZXdlZCBmb3Igc2VjdXJpdHkgaXNzdWVzLlxuXG4gIERPTidUIFVTRSBJVCBGT1IgUFJPRFVDVElPTiFcbiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIGApO1xuXG4gIHJldHVybiB6aXAoYnJvd3NlclRhcmdldFJ1biwgc2VydmVyVGFyZ2V0UnVuLCBnZXRBdmFpbGFibGVQb3J0KCkpLnBpcGUoXG4gICAgc3dpdGNoTWFwKChbYnIsIHNyLCBub2RlU2VydmVyUG9ydF0pID0+IHtcbiAgICAgIHJldHVybiBjb21iaW5lTGF0ZXN0KFtici5vdXRwdXQsIHNyLm91dHB1dF0pLnBpcGUoXG4gICAgICAgIC8vIFRoaXMgaXMgbmVlZGVkIHNvIHRoYXQgaWYgYm90aCBzZXJ2ZXIgYW5kIGJyb3dzZXIgZW1pdCBjbG9zZSB0byBlYWNoIG90aGVyXG4gICAgICAgIC8vIHdlIG9ubHkgZW1pdCBvbmNlLiBUaGlzIHR5cGljYWxseSBoYXBwZW5zIG9uIHRoZSBmaXJzdCBidWlsZC5cbiAgICAgICAgZGVib3VuY2VUaW1lKDEyMCksXG4gICAgICAgIHN3aXRjaE1hcCgoW2IsIHNdKSA9PiB7XG4gICAgICAgICAgaWYgKCFzLnN1Y2Nlc3MgfHwgIWIuc3VjY2Vzcykge1xuICAgICAgICAgICAgcmV0dXJuIG9mKFtiLCBzXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN0YXJ0Tm9kZVNlcnZlcihzLCBub2RlU2VydmVyUG9ydCwgY29udGV4dC5sb2dnZXIsICEhb3B0aW9ucy5pbnNwZWN0KS5waXBlKFxuICAgICAgICAgICAgbWFwVG8oW2IsIHNdKSxcbiAgICAgICAgICAgIGNhdGNoRXJyb3IoKGVycikgPT4ge1xuICAgICAgICAgICAgICBjb250ZXh0LmxvZ2dlci5lcnJvcihgQSBzZXJ2ZXIgZXJyb3IgaGFzIG9jY3VycmVkLlxcbiR7bWFwRXJyb3JUb01lc3NhZ2UoZXJyKX1gKTtcblxuICAgICAgICAgICAgICByZXR1cm4gRU1QVFk7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICApO1xuICAgICAgICB9KSxcbiAgICAgICAgbWFwKFxuICAgICAgICAgIChbYiwgc10pID0+XG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBiLnN1Y2Nlc3MgJiYgcy5zdWNjZXNzLFxuICAgICAgICAgICAgICAgIGVycm9yOiBiLmVycm9yIHx8IHMuZXJyb3IsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIG5vZGVTZXJ2ZXJQb3J0LFxuICAgICAgICAgICAgXSBhcyBbU1NSRGV2U2VydmVyQnVpbGRlck91dHB1dCwgbnVtYmVyXSxcbiAgICAgICAgKSxcbiAgICAgICAgdGFwKChbYnVpbGRlck91dHB1dF0pID0+IHtcbiAgICAgICAgICBpZiAoYnVpbGRlck91dHB1dC5zdWNjZXNzKSB7XG4gICAgICAgICAgICBjb250ZXh0LmxvZ2dlci5pbmZvKCdcXG5Db21waWxlZCBzdWNjZXNzZnVsbHkuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgZGVib3VuY2UoKFtidWlsZGVyT3V0cHV0XSkgPT5cbiAgICAgICAgICBidWlsZGVyT3V0cHV0LnN1Y2Nlc3MgJiYgIW9wdGlvbnMuaW5zcGVjdFxuICAgICAgICAgICAgPyB3YWl0VW50aWxTZXJ2ZXJJc0xpc3RlbmluZyhub2RlU2VydmVyUG9ydClcbiAgICAgICAgICAgIDogRU1QVFksXG4gICAgICAgICksXG4gICAgICAgIGZpbmFsaXplKCgpID0+IHtcbiAgICAgICAgICB2b2lkIGJyLnN0b3AoKTtcbiAgICAgICAgICB2b2lkIHNyLnN0b3AoKTtcbiAgICAgICAgfSksXG4gICAgICApO1xuICAgIH0pLFxuICAgIGNvbmNhdE1hcCgoW2J1aWxkZXJPdXRwdXQsIG5vZGVTZXJ2ZXJQb3J0XSkgPT4ge1xuICAgICAgaWYgKCFidWlsZGVyT3V0cHV0LnN1Y2Nlc3MpIHtcbiAgICAgICAgcmV0dXJuIG9mKGJ1aWxkZXJPdXRwdXQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYnNJbnN0YW5jZS5hY3RpdmUpIHtcbiAgICAgICAgYnNJbnN0YW5jZS5yZWxvYWQoKTtcblxuICAgICAgICByZXR1cm4gb2YoYnVpbGRlck91dHB1dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZnJvbShpbml0QnJvd3NlclN5bmMoYnNJbnN0YW5jZSwgbm9kZVNlcnZlclBvcnQsIG9wdGlvbnMsIGNvbnRleHQpKS5waXBlKFxuICAgICAgICAgIHRhcCgoYnMpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGJhc2VVcmwgPSBnZXRCYXNlVXJsKGJzKTtcbiAgICAgICAgICAgIGNvbnRleHQubG9nZ2VyLmluZm8odGFncy5vbmVMaW5lYFxuICAgICAgICAgICAgICAgICoqXG4gICAgICAgICAgICAgICAgQW5ndWxhciBVbml2ZXJzYWwgTGl2ZSBEZXZlbG9wbWVudCBTZXJ2ZXIgaXMgbGlzdGVuaW5nIG9uICR7YmFzZVVybH0sXG4gICAgICAgICAgICAgICAgb3BlbiB5b3VyIGJyb3dzZXIgb24gJHtiYXNlVXJsfVxuICAgICAgICAgICAgICAgICoqXG4gICAgICAgICAgICAgIGApO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIG1hcFRvKGJ1aWxkZXJPdXRwdXQpLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0pLFxuICAgIG1hcChcbiAgICAgIChidWlsZGVyT3V0cHV0KSA9PlxuICAgICAgICAoe1xuICAgICAgICAgIHN1Y2Nlc3M6IGJ1aWxkZXJPdXRwdXQuc3VjY2VzcyxcbiAgICAgICAgICBlcnJvcjogYnVpbGRlck91dHB1dC5lcnJvcixcbiAgICAgICAgICBiYXNlVXJsOiBic0luc3RhbmNlICYmIGdldEJhc2VVcmwoYnNJbnN0YW5jZSksXG4gICAgICAgIH0gYXMgU1NSRGV2U2VydmVyQnVpbGRlck91dHB1dCksXG4gICAgKSxcbiAgICBmaW5hbGl6ZSgoKSA9PiB7XG4gICAgICBpZiAoYnNJbnN0YW5jZSkge1xuICAgICAgICBic0luc3RhbmNlLmV4aXQoKTtcbiAgICAgICAgYnNJbnN0YW5jZS5jbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfSksXG4gICAgY2F0Y2hFcnJvcigoZXJyb3IpID0+XG4gICAgICBvZih7XG4gICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICBlcnJvcjogbWFwRXJyb3JUb01lc3NhZ2UoZXJyb3IpLFxuICAgICAgfSksXG4gICAgKSxcbiAgKTtcbn1cblxuLy8gTG9ncyBvdXRwdXQgdG8gdGhlIHRlcm1pbmFsLlxuLy8gUmVtb3ZlcyBhbnkgdHJhaWxpbmcgbmV3IGxpbmVzIGZyb20gdGhlIG91dHB1dC5cbmV4cG9ydCBmdW5jdGlvbiBsb2coXG4gIHsgc3RkZXJyLCBzdGRvdXQgfTogeyBzdGRlcnI6IHN0cmluZyB8IHVuZGVmaW5lZDsgc3Rkb3V0OiBzdHJpbmcgfCB1bmRlZmluZWQgfSxcbiAgbG9nZ2VyOiBsb2dnaW5nLkxvZ2dlckFwaSxcbikge1xuICBpZiAoc3RkZXJyKSB7XG4gICAgLy8gU3RyaXAgdGhlIHdlYnBhY2sgc2NoZW1lICh3ZWJwYWNrOi8vKSBmcm9tIGVycm9yIGxvZy5cbiAgICBsb2dnZXIuZXJyb3Ioc3RkZXJyLnJlcGxhY2UoL1xcbj8kLywgJycpLnJlcGxhY2UoL3dlYnBhY2s6XFwvXFwvL2csICcuJykpO1xuICB9XG5cbiAgaWYgKHN0ZG91dCAmJiAhSUdOT1JFRF9TVERPVVRfTUVTU0FHRVMuc29tZSgoeCkgPT4gc3Rkb3V0LmluY2x1ZGVzKHgpKSkge1xuICAgIGxvZ2dlci5pbmZvKHN0ZG91dC5yZXBsYWNlKC9cXG4/JC8sICcnKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc3RhcnROb2RlU2VydmVyKFxuICBzZXJ2ZXJPdXRwdXQ6IEJ1aWxkZXJPdXRwdXQsXG4gIHBvcnQ6IG51bWJlcixcbiAgbG9nZ2VyOiBsb2dnaW5nLkxvZ2dlckFwaSxcbiAgaW5zcGVjdE1vZGUgPSBmYWxzZSxcbik6IE9ic2VydmFibGU8dm9pZD4ge1xuICBjb25zdCBvdXRwdXRQYXRoID0gc2VydmVyT3V0cHV0Lm91dHB1dFBhdGggYXMgc3RyaW5nO1xuICBjb25zdCBwYXRoID0gam9pbihvdXRwdXRQYXRoLCAnbWFpbi5qcycpO1xuICBjb25zdCBlbnYgPSB7IC4uLnByb2Nlc3MuZW52LCBQT1JUOiAnJyArIHBvcnQgfTtcblxuICBjb25zdCBhcmdzID0gWyctLWVuYWJsZS1zb3VyY2UtbWFwcycsIGBcIiR7cGF0aH1cImBdO1xuICBpZiAoaW5zcGVjdE1vZGUpIHtcbiAgICBhcmdzLnVuc2hpZnQoJy0taW5zcGVjdC1icmsnKTtcbiAgfVxuXG4gIHJldHVybiBvZihudWxsKS5waXBlKFxuICAgIGRlbGF5KDApLCAvLyBBdm9pZCBFQUREUklOVVNFIGVycm9yIHNpbmNlIGl0IHdpbGwgY2F1c2UgdGhlIGtpbGwgZXZlbnQgdG8gYmUgZmluaXNoLlxuICAgIHN3aXRjaE1hcCgoKSA9PiBzcGF3bkFzT2JzZXJ2YWJsZSgnbm9kZScsIGFyZ3MsIHsgZW52LCBzaGVsbDogdHJ1ZSB9KSksXG4gICAgdGFwKChyZXMpID0+IGxvZyh7IHN0ZGVycjogcmVzLnN0ZGVyciwgc3Rkb3V0OiByZXMuc3Rkb3V0IH0sIGxvZ2dlcikpLFxuICAgIGlnbm9yZUVsZW1lbnRzKCksXG4gICAgLy8gRW1pdCBhIHNpZ25hbCBhZnRlciB0aGUgcHJvY2VzcyBoYXMgYmVlbiBzdGFydGVkXG4gICAgc3RhcnRXaXRoKHVuZGVmaW5lZCksXG4gICk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGluaXRCcm93c2VyU3luYyhcbiAgYnJvd3NlclN5bmNJbnN0YW5jZTogYnJvd3NlclN5bmMuQnJvd3NlclN5bmNJbnN0YW5jZSxcbiAgbm9kZVNlcnZlclBvcnQ6IG51bWJlcixcbiAgb3B0aW9uczogU1NSRGV2U2VydmVyQnVpbGRlck9wdGlvbnMsXG4gIGNvbnRleHQ6IEJ1aWxkZXJDb250ZXh0LFxuKTogUHJvbWlzZTxicm93c2VyU3luYy5Ccm93c2VyU3luY0luc3RhbmNlPiB7XG4gIGlmIChicm93c2VyU3luY0luc3RhbmNlLmFjdGl2ZSkge1xuICAgIHJldHVybiBicm93c2VyU3luY0luc3RhbmNlO1xuICB9XG5cbiAgY29uc3QgeyBwb3J0OiBicm93c2VyU3luY1BvcnQsIG9wZW4sIGhvc3QsIHB1YmxpY0hvc3QsIHByb3h5Q29uZmlnIH0gPSBvcHRpb25zO1xuICBjb25zdCBic1BvcnQgPSBicm93c2VyU3luY1BvcnQgfHwgKGF3YWl0IGdldEF2YWlsYWJsZVBvcnQoKSk7XG4gIGNvbnN0IGJzT3B0aW9uczogYnJvd3NlclN5bmMuT3B0aW9ucyA9IHtcbiAgICBwcm94eToge1xuICAgICAgdGFyZ2V0OiBgbG9jYWxob3N0OiR7bm9kZVNlcnZlclBvcnR9YCxcbiAgICAgIHByb3h5T3B0aW9uczoge1xuICAgICAgICB4ZndkOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIHByb3h5UmVzOiBbXG4gICAgICAgIChwcm94eVJlcykgPT4ge1xuICAgICAgICAgIGlmICgnaGVhZGVycycgaW4gcHJveHlSZXMpIHtcbiAgICAgICAgICAgIHByb3h5UmVzLmhlYWRlcnNbJ2NhY2hlLWNvbnRyb2wnXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgLy8gcHJveHlPcHRpb25zIGlzIG5vdCBpbiB0aGUgdHlwaW5nc1xuICAgIH0gYXMgYnJvd3NlclN5bmMuUHJveHlPcHRpb25zICYgeyBwcm94eU9wdGlvbnM6IHsgeGZ3ZDogYm9vbGVhbiB9IH0sXG4gICAgaG9zdCxcbiAgICBwb3J0OiBic1BvcnQsXG4gICAgdWk6IGZhbHNlLFxuICAgIHNlcnZlcjogZmFsc2UsXG4gICAgbm90aWZ5OiBmYWxzZSxcbiAgICBnaG9zdE1vZGU6IGZhbHNlLFxuICAgIGxvZ0xldmVsOiBvcHRpb25zLnZlcmJvc2UgPyAnZGVidWcnIDogJ3NpbGVudCcsXG4gICAgb3BlbixcbiAgICBodHRwczogZ2V0U3NsQ29uZmlnKGNvbnRleHQud29ya3NwYWNlUm9vdCwgb3B0aW9ucyksXG4gIH07XG5cbiAgY29uc3QgcHVibGljSG9zdE5vcm1hbGl6ZWQgPVxuICAgIHB1YmxpY0hvc3QgJiYgcHVibGljSG9zdC5lbmRzV2l0aCgnLycpXG4gICAgICA/IHB1YmxpY0hvc3Quc3Vic3RyaW5nKDAsIHB1YmxpY0hvc3QubGVuZ3RoIC0gMSlcbiAgICAgIDogcHVibGljSG9zdDtcblxuICBpZiAocHVibGljSG9zdE5vcm1hbGl6ZWQpIHtcbiAgICBjb25zdCB7IHByb3RvY29sLCBob3N0bmFtZSwgcG9ydCwgcGF0aG5hbWUgfSA9IHVybC5wYXJzZShwdWJsaWNIb3N0Tm9ybWFsaXplZCk7XG4gICAgY29uc3QgZGVmYXVsdFNvY2tldElvUGF0aCA9ICcvYnJvd3Nlci1zeW5jL3NvY2tldC5pbyc7XG4gICAgY29uc3QgZGVmYXVsdE5hbWVzcGFjZSA9ICcvYnJvd3Nlci1zeW5jJztcbiAgICBjb25zdCBoYXNQYXRobmFtZSA9ICEhKHBhdGhuYW1lICYmIHBhdGhuYW1lICE9PSAnLycpO1xuICAgIGNvbnN0IG5hbWVzcGFjZSA9IGhhc1BhdGhuYW1lID8gcGF0aG5hbWUgKyBkZWZhdWx0TmFtZXNwYWNlIDogZGVmYXVsdE5hbWVzcGFjZTtcbiAgICBjb25zdCBwYXRoID0gaGFzUGF0aG5hbWUgPyBwYXRobmFtZSArIGRlZmF1bHRTb2NrZXRJb1BhdGggOiBkZWZhdWx0U29ja2V0SW9QYXRoO1xuXG4gICAgYnNPcHRpb25zLnNvY2tldCA9IHtcbiAgICAgIG5hbWVzcGFjZSxcbiAgICAgIHBhdGgsXG4gICAgICBkb21haW46IHVybC5mb3JtYXQoe1xuICAgICAgICBwcm90b2NvbCxcbiAgICAgICAgaG9zdG5hbWUsXG4gICAgICAgIHBvcnQsXG4gICAgICB9KSxcbiAgICB9O1xuXG4gICAgLy8gV2hlbiBoYXZpbmcgYSBwYXRobmFtZSB3ZSBhbHNvIG5lZWQgdG8gY3JlYXRlIGEgcmV2ZXJzZSBwcm94eSBiZWNhdXNlIHNvY2tldC5pb1xuICAgIC8vIHdpbGwgYmUgbGlzdGVuaW5nIG9uOiAnaHR0cDovL2xvY2FsaG9zdDo0MjAwL3Nzci9icm93c2VyLXN5bmMvc29ja2V0LmlvJ1xuICAgIC8vIEhvd2V2ZXIgdXNlcnMgd2lsbCB0eXBpY2FsbHkgaGF2ZSBhIHJldmVyc2UgcHJveHkgdGhhdCB3aWxsIHJlZGlyZWN0IGFsbCBtYXRjaGluZyByZXF1ZXN0c1xuICAgIC8vIGV4OiBodHRwOi8vdGVzdGluZ2hvc3QuY29tL3NzciAtPiBodHRwOi8vbG9jYWxob3N0OjQyMDAgd2hpY2ggd2lsbCByZXN1bHQgaW4gYSA0MDQuXG4gICAgaWYgKGhhc1BhdGhuYW1lKSB7XG4gICAgICAvLyBSZW1vdmUgbGVhZGluZyBzbGFzaFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICAgIChic09wdGlvbnMuc2NyaXB0UGF0aCA9IChwKSA9PiBwLnN1YnN0cmluZygxKSksXG4gICAgICAgIChic09wdGlvbnMubWlkZGxld2FyZSA9IFtcbiAgICAgICAgICBjcmVhdGVQcm94eU1pZGRsZXdhcmUoZGVmYXVsdFNvY2tldElvUGF0aCwge1xuICAgICAgICAgICAgdGFyZ2V0OiB1cmwuZm9ybWF0KHtcbiAgICAgICAgICAgICAgcHJvdG9jb2w6ICdodHRwJyxcbiAgICAgICAgICAgICAgaG9zdG5hbWU6IGhvc3QsXG4gICAgICAgICAgICAgIHBvcnQ6IGJzUG9ydCxcbiAgICAgICAgICAgICAgcGF0aG5hbWU6IHBhdGgsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIHdzOiB0cnVlLFxuICAgICAgICAgICAgbG9nTGV2ZWw6ICdzaWxlbnQnLFxuICAgICAgICAgIH0pIGFzIGFueSxcbiAgICAgICAgXSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb3h5Q29uZmlnKSB7XG4gICAgaWYgKCFic09wdGlvbnMubWlkZGxld2FyZSkge1xuICAgICAgYnNPcHRpb25zLm1pZGRsZXdhcmUgPSBbXTtcbiAgICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KGJzT3B0aW9ucy5taWRkbGV3YXJlKSkge1xuICAgICAgYnNPcHRpb25zLm1pZGRsZXdhcmUgPSBbYnNPcHRpb25zLm1pZGRsZXdhcmVdO1xuICAgIH1cblxuICAgIGJzT3B0aW9ucy5taWRkbGV3YXJlID0gW1xuICAgICAgLi4uYnNPcHRpb25zLm1pZGRsZXdhcmUsXG4gICAgICAuLi5nZXRQcm94eUNvbmZpZyhjb250ZXh0LndvcmtzcGFjZVJvb3QsIHByb3h5Q29uZmlnKSxcbiAgICBdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBicm93c2VyU3luY0luc3RhbmNlLmluaXQoYnNPcHRpb25zLCAoZXJyb3IsIGJzKSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUoYnMpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbWFwRXJyb3JUb01lc3NhZ2UoZXJyb3I6IHVua25vd24pOiBzdHJpbmcge1xuICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgIHJldHVybiBlcnJvci5tZXNzYWdlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXJyb3I7XG4gIH1cblxuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIGdldFNzbENvbmZpZyhcbiAgcm9vdDogc3RyaW5nLFxuICBvcHRpb25zOiBTU1JEZXZTZXJ2ZXJCdWlsZGVyT3B0aW9ucyxcbik6IGJyb3dzZXJTeW5jLkh0dHBzT3B0aW9ucyB8IHVuZGVmaW5lZCB8IGJvb2xlYW4ge1xuICBjb25zdCB7IHNzbCwgc3NsQ2VydCwgc3NsS2V5IH0gPSBvcHRpb25zO1xuICBpZiAoc3NsICYmIHNzbENlcnQgJiYgc3NsS2V5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGtleTogcGF0aFJlc29sdmUocm9vdCwgc3NsS2V5KSxcbiAgICAgIGNlcnQ6IHBhdGhSZXNvbHZlKHJvb3QsIHNzbENlcnQpLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gc3NsO1xufVxuXG5mdW5jdGlvbiBnZXRQcm94eUNvbmZpZyhyb290OiBzdHJpbmcsIHByb3h5Q29uZmlnOiBzdHJpbmcpOiBicm93c2VyU3luYy5NaWRkbGV3YXJlSGFuZGxlcltdIHtcbiAgY29uc3QgcHJveHlQYXRoID0gcGF0aFJlc29sdmUocm9vdCwgcHJveHlDb25maWcpO1xuICBsZXQgcHJveHlTZXR0aW5nczogYW55O1xuICB0cnkge1xuICAgIHByb3h5U2V0dGluZ3MgPSByZXF1aXJlKHByb3h5UGF0aCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLmNvZGUgPT09ICdNT0RVTEVfTk9UX0ZPVU5EJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBQcm94eSBjb25maWcgZmlsZSAke3Byb3h5UGF0aH0gZG9lcyBub3QgZXhpc3QuYCk7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cblxuICBjb25zdCBwcm94aWVzID0gQXJyYXkuaXNBcnJheShwcm94eVNldHRpbmdzKSA/IHByb3h5U2V0dGluZ3MgOiBbcHJveHlTZXR0aW5nc107XG4gIGNvbnN0IGNyZWF0ZWRQcm94aWVzID0gW107XG5cbiAgZm9yIChjb25zdCBwcm94eSBvZiBwcm94aWVzKSB7XG4gICAgZm9yIChjb25zdCBba2V5LCBjb250ZXh0XSBvZiBPYmplY3QuZW50cmllcyhwcm94eSkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xuICAgICAgICBjcmVhdGVkUHJveGllcy5wdXNoKFxuICAgICAgICAgIGNyZWF0ZVByb3h5TWlkZGxld2FyZShcbiAgICAgICAgICAgIGtleS5yZXBsYWNlKC9eXFwqJC8sICcqKicpLnJlcGxhY2UoL1xcL1xcKiQvLCAnJyksXG4gICAgICAgICAgICBjb250ZXh0IGFzIGFueSxcbiAgICAgICAgICApIGFzIGJyb3dzZXJTeW5jLk1pZGRsZXdhcmVIYW5kbGVyLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3JlYXRlZFByb3hpZXMucHVzaChcbiAgICAgICAgICBjcmVhdGVQcm94eU1pZGRsZXdhcmUoa2V5LCBjb250ZXh0IGFzIGFueSkgYXMgYnJvd3NlclN5bmMuTWlkZGxld2FyZUhhbmRsZXIsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNyZWF0ZWRQcm94aWVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCdWlsZGVyPFNTUkRldlNlcnZlckJ1aWxkZXJPcHRpb25zLCBCdWlsZGVyT3V0cHV0PihleGVjdXRlKTtcbiJdfQ==